/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateProductEntityArgs } from "./CreateProductEntityArgs";
import { UpdateProductEntityArgs } from "./UpdateProductEntityArgs";
import { DeleteProductEntityArgs } from "./DeleteProductEntityArgs";
import { ProductEntityCountArgs } from "./ProductEntityCountArgs";
import { ProductEntityFindManyArgs } from "./ProductEntityFindManyArgs";
import { ProductEntityFindUniqueArgs } from "./ProductEntityFindUniqueArgs";
import { ProductEntity } from "./ProductEntity";
import { ProductEntityService } from "../productEntity.service";
@graphql.Resolver(() => ProductEntity)
export class ProductEntityResolverBase {
  constructor(protected readonly service: ProductEntityService) {}

  async _productEntitiesMeta(
    @graphql.Args() args: ProductEntityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductEntity])
  async productEntities(
    @graphql.Args() args: ProductEntityFindManyArgs
  ): Promise<ProductEntity[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => ProductEntity, { nullable: true })
  async productEntity(
    @graphql.Args() args: ProductEntityFindUniqueArgs
  ): Promise<ProductEntity | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductEntity)
  async createProductEntity(
    @graphql.Args() args: CreateProductEntityArgs
  ): Promise<ProductEntity> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ProductEntity)
  async updateProductEntity(
    @graphql.Args() args: UpdateProductEntityArgs
  ): Promise<ProductEntity | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductEntity)
  async deleteProductEntity(
    @graphql.Args() args: DeleteProductEntityArgs
  ): Promise<ProductEntity | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
